### Generated by Winemaker 0.8.4
###
### Invocation command line was
### /usr/bin/winemaker . --dll

TARGETS=x86_64-w64-mingw32 i686-w64-mingw32
TARGET=x86_64-w64-mingw32
GCCM=-m64
EXTRA_LDFLAGS=
GCCM32= -m32 \
	-L/usr/lib/i386-linux-gnu/ \
	-L/usr/lib/i386-linux-gnu/wine/

SRCDIR                = .
SUBDIRS               =
DLLS                  = native-func-$(TARGET).dll
LIBS                  =
EXES                  =



### Common settings

CEXTRA                = -Wall $(GCCM) --verbose
CXXEXTRA              =
RCEXTRA               =
DEFINES               =
INCLUDE_PATH          =
DLL_PATH              =
DLL_IMPORTS           =
LIBRARY_PATH          =
LIBRARIES             =


### native-func.dll sources and settings

native_func_dll_MODULE= native-func-$(TARGET).dll
native_func_dll_C_SRCS= native-func.c convert_filename.c
native_func_dll_CXX_SRCS=
native_func_dll_RC_SRCS=
native_func_dll_LDFLAGS= $(GCCM) -shared \
			$(native_func_dll_MODULE:.dll=.spec)

	# \
			-mno-cygwin
native_func_dll_ARFLAGS=
native_func_dll_DLL_PATH=
native_func_dll_DLLS  = \
		#	odbc32 \
			ole32 \
			oleaut32 \
			winspool \
			odbccp32	
native_func_dll_LIBRARY_PATH= $(EXTRA_LDFLAGS)
native_func_dll_LIBRARIES= # uuid

native_func_dll_OBJS  = $(native_func_dll_C_SRCS:.c=-$(TARGET).o) \
			$(native_func_dll_CXX_SRCS:.cpp=-$(TARGET).o) \
			$(native_func_dll_RC_SRCS:.rc=-$(TARGET).res)



### Global source lists

C_SRCS                = $(native_func_dll_C_SRCS)
CXX_SRCS              = $(native_func_dll_CXX_SRCS)
RC_SRCS               = $(native_func_dll_RC_SRCS)


### Tools

CC = winegcc
LD = winegcc
CXX = wineg++
RC = wrc
AR = ar


### Generic targets



all:
	$(MAKE) TARGET=x86_64-w64-mingw32 GCCM=-m64 all-target
	$(MAKE) TARGET=i686-w64-mingw32 \
		GCCM="$(GCCM32)" \
		all-target

all-target: $(SUBDIRS) $(DLLS:%=%.so) $(LIBS) $(EXES)

### Build rules

.PHONY: all clean dummy

$(SUBDIRS): dummy
	@cd $@ && $(MAKE)

# Implicit rules

.SUFFIXES: .cpp .cxx .rc .res
DEFINCL = $(INCLUDE_PATH) $(DEFINES) $(OPTIONS)

%-$(TARGET).o: %.c
	$(CC) -c $(CFLAGS) $(CEXTRA) $(DEFINCL) -o $@ $<

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(CXXEXTRA) $(DEFINCL) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(CXXEXTRA) $(DEFINCL) -o $@ $<

.rc.res:
	$(RC) $(RCFLAGS) $(RCEXTRA) $(DEFINCL) -fo$@ $<

# Rules for cleaning

CLEAN_FILES     = y.tab.c y.tab.h lex.yy.c core *.orig *.rej \
                  \\\#*\\\# *~ *% .\\\#*

clean:: $(SUBDIRS:%=%/__clean__) $(EXTRASUBDIRS:%=%/__clean__)
	$(RM) $(CLEAN_FILES) $(RC_SRCS:.rc=.res) $(C_SRCS:.c=-$(TARGET).o) \
		$(CXX_SRCS:.cpp=-$(TARGET).o)
	$(RM) $(DLLS:%=%.so) $(LIBS) $(EXES) $(EXES:%=%.so)

$(SUBDIRS:%=%/__clean__): dummy
	cd `dirname $@` && $(MAKE) clean

$(EXTRASUBDIRS:%=%/__clean__): dummy
	-cd `dirname $@` && $(RM) $(CLEAN_FILES)

### Target specific build rules
DEFLIB = $(LIBRARY_PATH) $(LIBRARIES) $(DLL_PATH) $(DLL_IMPORTS:%=-l%)

$(native_func_dll_MODULE).so: $(native_func_dll_OBJS) $(native_func_dll_MODULE:.dll=.spec)
	$(LD) $(native_func_dll_LDFLAGS) -o $@ $(native_func_dll_OBJS) $(native_func_dll_LIBRARY_PATH) $(native_func_dll_DLL_PATH) $(DEFLIB) $(native_func_dll_DLLS:%=-l%) $(native_func_dll_LIBRARIES:%=-l%)


#native_func.o: native_func.c
#	gcc -c $(CFLAGS) $(CEXTRA) $(DEFINCL) -o $@ $<
%-$(TARGET).spec: %.spec
	ln -s "$<" "$@"

check:all
	for target in $(TARGETS) ; \
	do \
		cp ../run-native-$$target.exe uname.exe && \
		$$target env WINEDLLPATH=. ./uname.exe -a || exit ; \
	done
